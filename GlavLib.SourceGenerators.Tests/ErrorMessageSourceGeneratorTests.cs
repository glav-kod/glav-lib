using GlavLib.Basics.Errors;
using GlavLib.SourceGenerators.Tests.Helpers;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

namespace GlavLib.SourceGenerators.Tests;

public class ErrorMessageSourceGeneratorTests
{
    [Fact]
    public void It_should_generate_error_message()
    {
        //language=yaml
        const string source = """
                              Namespace: GlavKod.Tests
                              ClassName: SystemErrors

                              Errors:
                                WrongFormat: Неверный формат
                              """;

        var result = Run("SystemErrors.yaml", source);

        //language=CSharp
        const string expected = """
                                /// <auto-generated/>
                                using GlavLib.Basics.Errors;

                                namespace GlavKod.Tests
                                {
                                    public static class SystemErrors
                                    {
                                        public static readonly ErrorMessage WrongFormat = new("WrongFormat", "Неверный формат");
                                    }
                                }
                                """;

        Assert.Equal(expected, result, ignoreLineEndingDifferences: true);
    }
    
    [Fact]
    public void It_should_generate_error_func()
    {
        //language=yaml
        const string source = """
                              Namespace: GlavKod.Tests
                              ClassName: SystemErrors

                              Errors:
                                WrongSum: "Неверная сумма: {sum:decimal?}"
                              """;

        var result = Run("SystemErrors.yaml", source);

        //language=CSharp
        const string expected = """
                                /// <auto-generated/>
                                using GlavLib.Basics.Errors;

                                namespace GlavKod.Tests
                                {
                                    public static class SystemErrors
                                    {
                                        public static ErrorMessage WrongSum(decimal? sum)
                                        {
                                            var args = new WrongSumArgs
                                            {
                                                Sum = sum
                                            };
                                            var message = $"Неверная сумма: {sum}";
                                            return new ErrorMessage("WrongSum", message, args);
                                        }
                                
                                        public sealed class WrongSumArgs
                                        {
                                            public required decimal? Sum { get; init; }
                                        }
                                    }
                                }
                                """;

        Assert.Equal(expected, result, ignoreLineEndingDifferences: true);
    }
    
    [Fact]
    public void It_should_generate_without_namespace()
    {
        //language=yaml
        const string source = """
                              ClassName: SystemErrors

                              Errors:
                                WrongFormat: Неверный формат
                              """;

        var result = Run("SystemErrors.yaml", source);

        //language=CSharp
        const string expected = """
                                /// <auto-generated/>
                                using GlavLib.Basics.Errors;

                                public static class SystemErrors
                                {
                                    public static readonly ErrorMessage WrongFormat = new("WrongFormat", "Неверный формат");
                                }
                                """;

        Assert.Equal(expected, result, ignoreLineEndingDifferences: true);
    }


    private static string Run(string filePath, string errorMessagesJson)
    {
        var generators = new[]
        {
            new ErrorMessageSourceGenerator().AsSourceGenerator()
        };

        var additionalTexts = new AdditionalText[]
        {
            new TestAdditionalText(path: filePath, text: errorMessagesJson)
        };

        var driver = CSharpGeneratorDriver.Create(generators, additionalTexts);

        var assemblyPath = Path.GetDirectoryName(typeof(object).Assembly.Location)!;

        var references = new[]
        {
            MetadataReference.CreateFromFile(Path.Combine(assemblyPath, "mscorlib.dll")),
            MetadataReference.CreateFromFile(Path.Combine(assemblyPath, "System.dll")),
            MetadataReference.CreateFromFile(Path.Combine(assemblyPath, "System.Core.dll")),
            MetadataReference.CreateFromFile(Path.Combine(assemblyPath, "System.Private.CoreLib.dll")),
            MetadataReference.CreateFromFile(Path.Combine(assemblyPath, "System.Runtime.dll")),
            MetadataReference.CreateFromFile(typeof(ErrorMessageAttribute).Assembly.Location),
        };


        var compilation = CSharpCompilation.Create(assemblyName: "GlavLib.SourceGenerators.Tests",
            syntaxTrees: Array.Empty<SyntaxTree>(),
            references: references);

        //act
        var runResult = driver.RunGenerators(compilation).GetRunResult();

        var generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("SystemErrors.g.cs"));

        return generatedFileSyntax.GetText().ToString();
    }
}