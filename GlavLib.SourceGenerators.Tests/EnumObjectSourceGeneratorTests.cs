using Microsoft.CodeAnalysis;

namespace GlavLib.SourceGenerators.Tests;

public class EnumObjectSourceGeneratorTests : SourceGeneratorTestsBase
{
    [Fact]
    public void It_should_generate_enum_object()
    {
        //language=CSharp
        const string source = """
                              using GlavLib.Abstractions.DataTypes;

                              namespace TestNamespace;

                              [EnumObjectItem("Som", "KGS", "Сом")]
                              [EnumObjectItem("Tenge", "KZT", "Тенге")]
                              public partial sealed class Currency : EnumObject
                              {
                              }
                              """;

        //language=CSharp
        const string expected = """
                                /// <auto-generated/>
                                namespace TestNamespace
                                {
                                    partial class Currency : GlavLib.Abstractions.DataTypes.IEnumObject<TestNamespace.Currency>
                                    {
                                        public const string SomKey = "KGS";
                                        public const string TengeKey = "KZT";
                                        public static readonly Currency Som = new(SomKey, "Сом");
                                        public static readonly Currency Tenge = new(TengeKey, "Тенге");
                                        private Currency(string key, string displayName) : base(key, displayName)
                                        {
                                        }
                                
                                        public static Currency Create(string key)
                                        {
                                            return key switch
                                            {
                                                SomKey => Som,
                                                TengeKey => Tenge,
                                                _ => throw new global::System.InvalidOperationException($"Неожиданный ключ '{key}'")};
                                        }
                                    }
                                }
                                """;

        var result = RunSourceGenerator(sourceGenerator: new EnumObjectSourceGenerator().AsSourceGenerator(),
                                        sourceCode: source,
                                        resultFile: "Currency.g.cs");

        //assert
        Assert.Equal(expected, result, ignoreLineEndingDifferences: true);
    }
}