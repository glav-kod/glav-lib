using GlavLib.Basics.DataTypes;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

namespace GlavLib.SourceGenerators.Tests;

public class EnumObjectSourceGeneratorTests
{
    [Fact]
    public void ItShouldGenerateEnumObject()
    {
        //language=CSharp
        const string source = """
                              using GlavLib.Basics.DataTypes;
                              
                              namespace TestNamespace;

                              [EnumObjectItem("Som", "KGS", "Сом")]
                              [EnumObjectItem("Tenge", "KZT", "Тенге")]
                              public partial sealed class Currency : EnumObject
                              {
                              }
                              """;

        //language=CSharp
        const string expected = """
                                /// <auto-generated/>
                                namespace TestNamespace
                                {
                                    partial class Currency : GlavLib.Basics.DataTypes.IEnumObject<TestNamespace.Currency>
                                    {
                                        public const string SomKey = "KGS";
                                        public const string TengeKey = "KZT";
                                        public static readonly Currency Som = new(SomKey, "Сом");
                                        public static readonly Currency Tenge = new(TengeKey, "Тенге");
                                        private Currency(string key, string displayName) : base(key, displayName)
                                        {
                                        }
                                
                                        public static Currency Create(string key)
                                        {
                                            return key switch
                                            {
                                                SomKey => Som,
                                                TengeKey => Tenge,
                                                _ => throw new System.InvalidOperationException($"Неожиданный ключ '{key}'")};
                                        }
                                    }
                                }
                                """;

        var generator = new EnumObjectSourceGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);

        var assemblyPath = Path.GetDirectoryName(typeof(object).Assembly.Location)!;
        
        var references = new[]
        {
            MetadataReference.CreateFromFile(Path.Combine(assemblyPath, "mscorlib.dll")),
            MetadataReference.CreateFromFile(Path.Combine(assemblyPath, "System.dll")),
            MetadataReference.CreateFromFile(Path.Combine(assemblyPath, "System.Core.dll")),
            MetadataReference.CreateFromFile(Path.Combine(assemblyPath, "System.Private.CoreLib.dll")),
            MetadataReference.CreateFromFile(Path.Combine(assemblyPath, "System.Runtime.dll")),
            MetadataReference.CreateFromFile(typeof(EnumObject).Assembly.Location)
        };

        var compilation = CSharpCompilation.Create(assemblyName: nameof(EnumObjectSourceGeneratorTests),
                                                   syntaxTrees: new[] { CSharpSyntaxTree.ParseText(source) },
                                                   references: references);

        //act
        var runResult = driver.RunGenerators(compilation).GetRunResult();

        //assert
        var generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("Currency.g.cs"));

        var result = generatedFileSyntax.GetText().ToString();

        Assert.Equal(expected, result, ignoreLineEndingDifferences: true);
    }
}