namespace GlavLib.SourceGenerators.Tests;

public partial class AutofacSourceGeneratorTests
{
    public class CommandHandlers
    {
        [Fact]
        public void It_should_generate_command_handler_registration()
        {
            //language=CSharp
            const string source = """
                                  using GlavLib.App.Commands;

                                  namespace TestNamespace;

                                  public sealed class TestCommand { }

                                  public sealed class TestCommandHandler : CommandHandler<TestCommand, string>
                                  {
                                      public override Task<Result<string, CommandHandlerError>> HandleAsync(TestCommand command, CancellationToken cancellationToken)
                                      {
                                          Result<string, CommandHandlerError> result = "ok";
                                          return Task.FromResult(result);
                                      }
                                  }
                                  """;

            var result = Run(source);

            //language=CSharp
            const string expected = """
                                    /// <auto-generated/>

                                    using Autofac;

                                    namespace GlavLib.SourceGenerators.Tests;

                                    internal sealed class CompositionRoot : Module
                                    {
                                        protected override void Load(ContainerBuilder builder)
                                        {
                                            builder.RegisterType<TestNamespace.TestCommandHandler>().As<GlavLib.App.Commands.CommandHandler<TestNamespace.TestCommand, string>>().SingleInstance();
                                        }
                                    }
                                    """;

            Assert.Equal(expected, result, ignoreLineEndingDifferences: true);
        }

        [Fact]
        public void It_should_generate_unit_command_handler_registration()
        {
            //language=CSharp
            const string source = """
                                  using GlavLib.App.Commands;

                                  namespace TestNamespace;

                                  public sealed class TestCommand { }

                                  public sealed class TestCommandHandler : UnitCommandHandler<TestCommand>
                                  {
                                      public override Task<UnitResult<CommandHandlerError>> HandleAsync(TestCommand command, CancellationToken cancellationToken)
                                      {
                                          var result = UnitResult.Success<CommandHandlerError>();
                                          return Task.FromResult(result);
                                      }
                                  }
                                  """;

            var result = Run(source);

            //language=CSharp
            const string expected = """
                                    /// <auto-generated/>

                                    using Autofac;

                                    namespace GlavLib.SourceGenerators.Tests;

                                    internal sealed class CompositionRoot : Module
                                    {
                                        protected override void Load(ContainerBuilder builder)
                                        {
                                            builder.RegisterType<TestNamespace.TestCommandHandler>().As<GlavLib.App.Commands.UnitCommandHandler<TestNamespace.TestCommand>>().SingleInstance();
                                        }
                                    }
                                    """;

            Assert.Equal(expected, result, ignoreLineEndingDifferences: true);
        }
    }
}